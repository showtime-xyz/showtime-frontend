diff --git a/node_modules/expo-av/.DS_Store b/node_modules/expo-av/.DS_Store
new file mode 100644
index 0000000..2617f52
Binary files /dev/null and b/node_modules/expo-av/.DS_Store differ
diff --git a/node_modules/expo-av/CHANGELOG.md b/node_modules/expo-av/CHANGELOG.md
index e1aed7a..9f55520 100644
--- a/node_modules/expo-av/CHANGELOG.md
+++ b/node_modules/expo-av/CHANGELOG.md
@@ -10,19 +10,6 @@
 
 ### 💡 Others
 
-## 13.0.3 — 2023-02-24
-
-### 🐛 Bug fixes
-
-- Fixed build errors when testing on React Native nightly builds. ([#19805](https://github.com/expo/expo/pull/19805) by [@kudo](https://github.com/kudo))
-- Added React Native 0.71 support. ([#20470](https://github.com/expo/expo/pull/20470) by [@kudo](https://github.com/kudo))
-
-## 13.0.2 — 2022-11-29
-
-### 🐛 Bug fixes
-
-- Fixed error for duplicated META-INF files when building on Android. ([#20251](https://github.com/expo/expo/pull/20251) by [@kudo](https://github.com/kudo))
-
 ## 13.0.1 — 2022-10-30
 
 ### 🎉 New features
diff --git a/node_modules/expo-av/android/CMakeLists.txt b/node_modules/expo-av/android/CMakeLists.txt
index c14677a..8e5945c 100644
--- a/node_modules/expo-av/android/CMakeLists.txt
+++ b/node_modules/expo-av/android/CMakeLists.txt
@@ -1,13 +1,10 @@
 cmake_minimum_required(VERSION 3.4.1)
 
-project(expo-av)
-
 set (CMAKE_VERBOSE_MAKEFILE ON)
 set (CMAKE_CXX_STANDARD 14)
 
 set (PACKAGE_NAME "expo-av")
 set (BUILD_DIR ${CMAKE_SOURCE_DIR}/build)
-set (ignoreMe "${RN_SO_DIR}")
 
 # shared
 
@@ -19,31 +16,65 @@ add_library(
         src/main/cpp/JAVManager.cpp
 )
 
+# Extracted AAR: ${BUILD_DIR}/react-native-0*/jni/${ANDROID_ABI}
+file(GLOB LIBRN_DIR "${RN_SO_DIR}/${ANDROID_ABI}")
+if (NOT LIBRN_DIR)
+    # If /${ANDROID_ABI} dir not found, then ${RN_SO_DIR} is probably:
+    # ReactAndroid/build/react-ndk/exported
+    file(GLOB LIBRN_DIR "${RN_SO_DIR}")
+endif()
+
+file(GLOB libfbjni_include_DIRS "${BUILD_DIR}/fbjni-*-headers.jar/")
+
 # includes
 
 target_include_directories(
         ${PACKAGE_NAME}
         PRIVATE
-        # header only imports from turbomodule, e.g. CallInvokerHolder.h
+        "${REACT_NATIVE_DIR}/React"
+        "${REACT_NATIVE_DIR}/React/Base"
+        "${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni"
         "${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule"
+        "${REACT_NATIVE_DIR}/ReactAndroid/src/main/java/com/facebook/react/turbomodule/core/jni"
+        "${REACT_NATIVE_DIR}/ReactCommon"
         "${REACT_NATIVE_DIR}/ReactCommon/callinvoker"
+        "${REACT_NATIVE_DIR}/ReactCommon/jsi"
+        ${libfbjni_include_DIRS}
 )
 
 # find libraries
 
 find_library(LOG_LIB log)
 
-find_package(ReactAndroid REQUIRED CONFIG)
+find_library(
+        FBJNI_LIB
+        fbjni
+        PATHS ${LIBRN_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
+
+find_library(
+        JSI_LIB
+        jsi
+        PATHS ${LIBRN_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
+
+find_library(
+        REACT_NATIVE_JNI_LIB
+        reactnativejni
+        PATHS ${LIBRN_DIR}
+        NO_CMAKE_FIND_ROOT_PATH
+)
 
-find_package(fbjni REQUIRED CONFIG)
 
 # linking
 
 target_link_libraries(
         ${PACKAGE_NAME}
         ${LOG_LIB}
-        fbjni::fbjni
-        ReactAndroid::jsi
-        ReactAndroid::reactnativejni
+        ${FBJNI_LIB}
+        ${JSI_LIB}
+        ${REACT_NATIVE_JNI_LIB}
         android
 )
diff --git a/node_modules/expo-av/android/build.gradle b/node_modules/expo-av/android/build.gradle
index 6929cba..49edd82 100644
--- a/node_modules/expo-av/android/build.gradle
+++ b/node_modules/expo-av/android/build.gradle
@@ -3,24 +3,16 @@ import java.nio.file.Paths
 apply plugin: 'com.android.library'
 apply plugin: 'kotlin-android'
 apply plugin: 'maven-publish'
-apply plugin: "de.undercouch.download"
 
 group = 'host.exp.exponent'
-version = '13.0.3'
-
-def REACT_NATIVE_BUILD_FROM_SOURCE = findProject(":ReactAndroid") != null
-def REACT_NATIVE_DIR = REACT_NATIVE_BUILD_FROM_SOURCE
-  ? findProject(":ReactAndroid").getProjectDir().parent
-  : new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).parent
-def RN_SO_DIR = REACT_NATIVE_BUILD_FROM_SOURCE
-  ? Paths.get(findProject(":ReactAndroid").getProjectDir().toString(), "build", "intermediates", "library_*", "*", "jni")
-  : "${buildDir}/react/jni"
-
-def reactProperties = new Properties()
-file("$REACT_NATIVE_DIR/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
-def REACT_NATIVE_VERSION = System.getenv("REACT_NATIVE_OVERRIDE_VERSION") ?: reactProperties.getProperty("VERSION_NAME")
-def REACT_NATIVE_TARGET_VERSION = REACT_NATIVE_VERSION.split("\\.")[1].toInteger()
-
+version = '13.0.1'
+
+def REACT_NATIVE_DIR = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).parent
+def RN_BUILD_FROM_SOURCE = findProject(":ReactAndroid") != null
+def RN_SO_DIR = RN_BUILD_FROM_SOURCE
+    ? Paths.get(findProject(":ReactAndroid").getProjectDir().toString(), "build", "intermediates", "library_*", "*", "jni")
+    : "${buildDir}/react-native-0*/jni"
+def RN_AAR_DIR = "${REACT_NATIVE_DIR}/android"
 def reactNativeArchitectures() {
     def value = project.getProperties().get("reactNativeArchitectures")
     return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
@@ -53,7 +45,6 @@ buildscript {
 
   dependencies {
     classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getKotlinVersion()}")
-    classpath("de.undercouch:gradle-download-task:5.3.0")
   }
 }
 
@@ -103,7 +94,7 @@ android {
     minSdkVersion safeExtGet("minSdkVersion", 21)
     targetSdkVersion safeExtGet("targetSdkVersion", 31)
     versionCode 24
-    versionName "13.0.3"
+    versionName "13.0.1"
 
     externalNativeBuild {
       cmake {
@@ -118,11 +109,7 @@ android {
 
   externalNativeBuild {
     cmake {
-      if (REACT_NATIVE_TARGET_VERSION >= 71) {
-        path "CMakeLists.txt"
-      } else {
-        path "legacy/CMakeLists.txt"
-      }
+      path "CMakeLists.txt"
     }
   }
 
@@ -133,7 +120,7 @@ android {
   packagingOptions {
     // Gradle will add cmake target dependencies into packaging.
     // Theses files are intermediated linking files to build reanimated and should not be in final package.
-    excludes += [
+    excludes = [
         "**/libc++_shared.so",
         "**/libreactnativejni.so",
         "**/libglog.so",
@@ -144,6 +131,10 @@ android {
         "**/libjsi.so",
     ]
   }
+  configurations {
+    extractHeaders
+    extractJNI
+  }
 
   lintOptions {
     abortOnError false
@@ -164,6 +155,8 @@ dependencies {
   implementation 'com.facebook.react:react-native:+'
 
   compileOnly 'com.facebook.fbjni:fbjni:0.2.2'
+  extractHeaders 'com.facebook.fbjni:fbjni:0.2.2:headers'
+  extractJNI 'com.facebook.fbjni:fbjni:0.2.2'
 
   api 'com.google.android.exoplayer:exoplayer:2.18.1'
   api 'com.google.android.exoplayer:extension-okhttp:2.18.1'
@@ -177,6 +170,82 @@ dependencies {
   testImplementation 'io.mockk:mockk:1.12.3'
 }
 
-if (REACT_NATIVE_TARGET_VERSION < 71) {
-  applyLegacyReactNativeLibsExtractionPlugin()
+def extractReactNativeAAR = { buildType ->
+  def suffix = buildType == 'Debug' ? '-debug' : '-release'
+  def rnAARs = fileTree(RN_AAR_DIR).matching { include "**/react-native/**/*${suffix}.aar" }
+  if (rnAARs.isEmpty()) {
+    rnAARs = fileTree(RN_AAR_DIR).matching { include "**/react-native/**/*.aar" }
+  }
+  if (rnAARs.any()) {
+    // node_modules/react-native has a .aar, extract headers
+    if (rnAARs.size() > 1) {
+      logger.error("More than one React Native AAR file has been found:")
+      rnAARs.each {println(it) }
+      throw new GradleException("Multiple React Native AARs found:\n${rnAARs.join("\n")}" +
+          "\nRemove the old ones and try again")
+    }
+  }
+  def rnAAR = rnAARs.singleFile
+  def file = rnAAR.absoluteFile
+  def packageName = file.name.tokenize('-')[0]
+  copy {
+    from zipTree(file)
+    into "$buildDir/$file.name"
+    include "jni/**/*"
+  }
+}
+
+task extractReactNativeAARRelease {
+  doLast {
+    extractReactNativeAAR('Release')
+  }
+}
+
+task extractReactNativeAARDebug {
+  doLast {
+    extractReactNativeAAR('Debug')
+  }
+}
+
+task extractAARHeaders {
+  doLast {
+    configurations.extractHeaders.files.each {
+      def file = it.absoluteFile
+      copy {
+        from zipTree(file)
+        into "$buildDir/$file.name"
+        include "**/*.h"
+      }
+    }
+  }
+}
+
+task extractJNIFiles {
+  doLast {
+    configurations.extractJNI.files.each {
+      def file = it.absoluteFile
+      copy {
+        from zipTree(file)
+        into "$buildDir/$file.name"
+        include "jni/**/*"
+      }
+    }
+  }
+}
+
+tasks.whenTaskAdded { task ->
+  if (!task.name.contains("Clean") && (task.name.contains('externalNativeBuild') || task.name.startsWith('configureCMake'))) {
+    def buildType = task.name.endsWith('Debug') ? 'Debug' : 'Release'
+    task.dependsOn(extractAARHeaders)
+    task.dependsOn(extractJNIFiles)
+    if (RN_BUILD_FROM_SOURCE) {
+      task.dependsOn(":ReactAndroid:copy${buildType}JniLibsProjectOnly")
+    } else {
+      task.dependsOn("extractReactNativeAAR${buildType}")
+    }
+  } else if (task.name.startsWith('generateJsonModel') && RN_BUILD_FROM_SOURCE) {
+    def buildType = task.name.endsWith('Debug') ? 'Debug' : 'Release'
+    task.dependsOn(":ReactAndroid:copy${buildType}JniLibsProjectOnly")
+  }
+
 }
diff --git a/node_modules/expo-av/android/legacy/CMakeLists.txt b/node_modules/expo-av/android/legacy/CMakeLists.txt
deleted file mode 100644
index cd2679c..0000000
--- a/node_modules/expo-av/android/legacy/CMakeLists.txt
+++ /dev/null
@@ -1,76 +0,0 @@
-# Remove this legacy folder when we drop SDK 47
-cmake_minimum_required(VERSION 3.4.1)
-
-project(expo-av)
-
-set (CMAKE_VERBOSE_MAKEFILE ON)
-set (CMAKE_CXX_STANDARD 14)
-
-set (PACKAGE_NAME "expo-av")
-set (BUILD_DIR ${CMAKE_SOURCE_DIR}/../build)
-set (SRC_DIR ${CMAKE_SOURCE_DIR}/../src)
-
-# shared
-
-add_library(
-        ${PACKAGE_NAME}
-        SHARED
-        ${SRC_DIR}/main/cpp/EXAV.cpp
-        ${SRC_DIR}/main/cpp/JPlayerData.cpp
-        ${SRC_DIR}/main/cpp/JAVManager.cpp
-)
-
-# Extracted AAR: ${BUILD_DIR}/react-native-0*/jni/${ANDROID_ABI}
-file(GLOB LIBRN_DIR "${RN_SO_DIR}/${ANDROID_ABI}")
-if (NOT LIBRN_DIR)
-    # If /${ANDROID_ABI} dir not found, then ${RN_SO_DIR} is probably:
-    # ReactAndroid/build/react-ndk/exported
-    file(GLOB LIBRN_DIR "${RN_SO_DIR}")
-endif()
-
-# includes
-
-target_include_directories(
-        ${PACKAGE_NAME}
-        PRIVATE
-        "${REACT_NATIVE_DIR}/React"
-        "${REACT_NATIVE_DIR}/React/Base"
-        "${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni"
-        "${REACT_NATIVE_DIR}/ReactAndroid/src/main/jni/react/turbomodule"
-        "${REACT_NATIVE_DIR}/ReactAndroid/src/main/java/com/facebook/react/turbomodule/core/jni"
-        "${REACT_NATIVE_DIR}/ReactCommon"
-        "${REACT_NATIVE_DIR}/ReactCommon/callinvoker"
-        "${REACT_NATIVE_DIR}/ReactCommon/jsi"
-)
-
-# find libraries
-
-find_library(LOG_LIB log)
-
-find_package(fbjni REQUIRED CONFIG)
-
-find_library(
-        JSI_LIB
-        jsi
-        PATHS ${LIBRN_DIR}
-        NO_CMAKE_FIND_ROOT_PATH
-)
-
-find_library(
-        REACT_NATIVE_JNI_LIB
-        reactnativejni
-        PATHS ${LIBRN_DIR}
-        NO_CMAKE_FIND_ROOT_PATH
-)
-
-
-# linking
-
-target_link_libraries(
-        ${PACKAGE_NAME}
-        ${LOG_LIB}
-        fbjni::fbjni
-        ${JSI_LIB}
-        ${REACT_NATIVE_JNI_LIB}
-        android
-)
diff --git a/node_modules/expo-av/android/src/main/java/expo/modules/av/video/VideoViewWrapper.kt b/node_modules/expo-av/android/src/main/java/expo/modules/av/video/VideoViewWrapper.kt
index 354fdb6..a593778 100644
--- a/node_modules/expo-av/android/src/main/java/expo/modules/av/video/VideoViewWrapper.kt
+++ b/node_modules/expo-av/android/src/main/java/expo/modules/av/video/VideoViewWrapper.kt
@@ -4,7 +4,6 @@ import android.annotation.SuppressLint
 import android.content.Context
 import android.os.Bundle
 import android.widget.FrameLayout
-import expo.modules.core.interfaces.DoNotStrip
 import expo.modules.kotlin.AppContext
 import expo.modules.kotlin.viewevent.EventDispatcher
 
@@ -14,8 +13,7 @@ import expo.modules.kotlin.viewevent.EventDispatcher
  * overriding our native layout.
  */
 @SuppressLint("ViewConstructor")
-@DoNotStrip
-class VideoViewWrapper @DoNotStrip constructor(context: Context, appContext: AppContext) : FrameLayout(context) {
+class VideoViewWrapper(context: Context, appContext: AppContext) : FrameLayout(context) {
   val videoViewInstance: VideoView
   private val mLayoutRunnable = Runnable {
     measure(
diff --git a/node_modules/expo-av/ios/.DS_Store b/node_modules/expo-av/ios/.DS_Store
new file mode 100644
index 0000000..9b5c147
Binary files /dev/null and b/node_modules/expo-av/ios/.DS_Store differ
diff --git a/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m b/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
index 5650c95..66ce1bd 100644
--- a/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
+++ b/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
@@ -325,7 +325,7 @@ NSString *const EXAVPlayerDataObserverMetadataKeyPath = @"timedMetadata";
 
       if (audioSessionError) {
         if (reject) {
-          reject(@"E_AV_PLAY", @"Play encountered an error: audio session not activated.", audioSessionError);
+          //reject(@"E_AV_PLAY", @"Play encountered an error: audio session not activated.", audioSessionError);
         }
       } else if (!seekSucceeded) {
         if (reject) {
diff --git a/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m b/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m
index 81dce13..77e372a 100644
--- a/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m
+++ b/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m
@@ -170,7 +170,9 @@ EX_REGISTER_SINGLETON_MODULE(AudioSessionManager);
   [_foregroundedModules compact];
 
   // Any possible failures are silent
-  [self _updateSessionConfiguration];
+  AVAudioSession *session = [AVAudioSession sharedInstance];
+  [session setCategory:AVAudioSessionCategoryAmbient error:nil];
+  [session setActive:false withOptions:AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation error:nil];
 }
 
 - (void)moduleDidForeground:(id)module
@@ -185,8 +187,10 @@ EX_REGISTER_SINGLETON_MODULE(AudioSessionManager);
 
   [_foregroundedModules addPointer:(__bridge void * _Nullable)(module)];
   
-  // Any possible failures are silent
-  [self _updateSessionConfiguration];
+  AVAudioSession *session = [AVAudioSession sharedInstance];
+  [session setCategory:AVAudioSessionCategoryPlayback error:nil];
+  [session setActive:true withOptions:AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation error:nil];
+
 }
 
 - (void)moduleWillDeallocate:(id)module
@@ -208,7 +212,8 @@ EX_REGISTER_SINGLETON_MODULE(AudioSessionManager);
 
   BOOL shouldBeActive = [self _shouldBeActive];
   NSString *category = [self _getRequestedCategory];
-  AVAudioSessionCategoryOptions options = [self _getCategoryOptions];
+  AVAudioSessionCategoryOptions options = [self _getCategoryOptions] | AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation;
+  
 
   // If the session ought to be deactivated let's deactivate it and then configure.
   // And if the session should be activated, let's configure it first!
@@ -284,7 +289,8 @@ EX_REGISTER_SINGLETON_MODULE(AudioSessionManager);
     }
   }
 
-  return AVAudioSessionCategorySoloAmbient;
+  // patched to also playback in silent mode (from SoloAmbient to Playback)
+  return AVAudioSessionCategoryPlayback;
 }
 
 - (AVAudioSessionCategoryOptions)_getCategoryOptions
