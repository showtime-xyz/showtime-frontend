diff --git a/node_modules/recyclerlistview/dist/reactnative/core/RecyclerListView.js b/node_modules/recyclerlistview/dist/reactnative/core/RecyclerListView.js
index cc8f2fb..a98072e 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/RecyclerListView.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/RecyclerListView.js
@@ -678,7 +678,7 @@ RecyclerListView.propTypes = {
     //Provide your own ScrollView Component. The contract for the scroll event should match the native scroll event contract, i.e.
     // scrollEvent = { nativeEvent: { contentOffset: { x: offset, y: offset } } }
     //Note: Please extend BaseScrollView to achieve expected behaviour
-    externalScrollView: PropTypes.func,
+    externalScrollView: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
     //Callback given when user scrolls to the end of the list or footer just becomes visible, useful in incremental loading scenarios
     onEndReached: PropTypes.func,
     //Specify how many pixels in advance you onEndReached callback
diff --git a/node_modules/recyclerlistview/dist/reactnative/platform/reactnative/scrollcomponent/ScrollComponent.js b/node_modules/recyclerlistview/dist/reactnative/platform/reactnative/scrollcomponent/ScrollComponent.js
index 2f7033c..e3dc2c2 100644
--- a/node_modules/recyclerlistview/dist/reactnative/platform/reactnative/scrollcomponent/ScrollComponent.js
+++ b/node_modules/recyclerlistview/dist/reactnative/platform/reactnative/scrollcomponent/ScrollComponent.js
@@ -43,7 +43,12 @@ var ScrollComponent = /** @class */ (function (_super) {
             if (event) {
                 var contentOffset = event.nativeEvent.contentOffset;
                 _this._offset = _this.props.isHorizontal ? contentOffset.x : contentOffset.y;
-                _this.props.onScroll(contentOffset.x, contentOffset.y, event);
+                var { paddingTop = 0, marginTop = 0, paddingLeft = 0, marginRight = 0 } = typeof _this.props.contentContainerStyle === "object"
+                ? _this.props.contentContainerStyle
+                : {};
+                var offsetY = contentOffset.y - (_this.props.isHorizontal ? 0 : +paddingTop + +marginTop);
+                var offsetX = contentOffset.x - (_this.props.isHorizontal ? +paddingLeft + +marginRight : 0);
+                _this.props.onScroll(offsetX, offsetY, event);
             }
         };
         _this._onLayout = function (event) {
diff --git a/node_modules/recyclerlistview/src/core/RecyclerListView.tsx b/node_modules/recyclerlistview/src/core/RecyclerListView.tsx
index e5707de..95dd87b 100644
--- a/node_modules/recyclerlistview/src/core/RecyclerListView.tsx
+++ b/node_modules/recyclerlistview/src/core/RecyclerListView.tsx
@@ -821,7 +821,7 @@ RecyclerListView.propTypes = {
     //Provide your own ScrollView Component. The contract for the scroll event should match the native scroll event contract, i.e.
     // scrollEvent = { nativeEvent: { contentOffset: { x: offset, y: offset } } }
     //Note: Please extend BaseScrollView to achieve expected behaviour
-    externalScrollView: PropTypes.func,
+    externalScrollView: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
 
     //Callback given when user scrolls to the end of the list or footer just becomes visible, useful in incremental loading scenarios
     onEndReached: PropTypes.func,
diff --git a/node_modules/recyclerlistview/src/core/scrollcomponent/BaseScrollComponent.tsx b/node_modules/recyclerlistview/src/core/scrollcomponent/BaseScrollComponent.tsx
index 2b6024c..ca8c590 100644
--- a/node_modules/recyclerlistview/src/core/scrollcomponent/BaseScrollComponent.tsx
+++ b/node_modules/recyclerlistview/src/core/scrollcomponent/BaseScrollComponent.tsx
@@ -1,4 +1,5 @@
 import * as React from "react";
+import type { ScrollViewProps } from "react-native";
 import { Dimension } from "../dependencies/LayoutProvider";
 import BaseScrollView, { ScrollEvent, ScrollViewDefaultProps } from "./BaseScrollView";
 
@@ -17,6 +18,7 @@ export interface ScrollComponentProps {
     renderContentContainer?: (props?: object, children?: React.ReactNode) => React.ReactNode | null;
     renderAheadOffset: number;
     layoutSize?: Dimension;
+    contentContainerStyle?: ScrollViewProps["contentContainerStyle"];
 }
 export default abstract class BaseScrollComponent extends React.Component<ScrollComponentProps, {}> {
     public abstract scrollTo(x: number, y: number, animate: boolean): void;
diff --git a/node_modules/recyclerlistview/src/platform/reactnative/scrollcomponent/ScrollComponent.tsx b/node_modules/recyclerlistview/src/platform/reactnative/scrollcomponent/ScrollComponent.tsx
index 0d0dedc..be12cf7 100644
--- a/node_modules/recyclerlistview/src/platform/reactnative/scrollcomponent/ScrollComponent.tsx
+++ b/node_modules/recyclerlistview/src/platform/reactnative/scrollcomponent/ScrollComponent.tsx
@@ -6,6 +6,7 @@ import {
     ScrollView,
     View,
 } from "react-native";
+import type { ViewStyle } from "react-native";
 import BaseScrollComponent, { ScrollComponentProps } from "../../../core/scrollcomponent/BaseScrollComponent";
 import TSCast from "../../../utils/TSCast";
 /***
@@ -105,7 +106,12 @@ export default class ScrollComponent extends BaseScrollComponent {
         if (event) {
             const contentOffset = event.nativeEvent.contentOffset;
             this._offset = this.props.isHorizontal ? contentOffset.x : contentOffset.y;
-            this.props.onScroll(contentOffset.x, contentOffset.y, event);
+            const { paddingTop = 0, marginTop = 0, paddingLeft = 0, marginRight = 0 } = typeof this.props.contentContainerStyle === "object"
+                ? (this.props.contentContainerStyle as ViewStyle)
+                : {};
+            const offsetY = contentOffset.y - (this.props.isHorizontal ? 0 : +paddingTop + +marginTop);
+            const offsetX = contentOffset.x - (this.props.isHorizontal ? +paddingLeft + +marginRight : 0);
+            this.props.onScroll(offsetX, offsetY, event);
         }
     }
 
