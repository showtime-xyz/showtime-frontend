diff --git a/node_modules/moti/build/interactions/pressable/pressable.js b/node_modules/moti/build/interactions/pressable/pressable.js
index 17dd332..ff269f6 100644
--- a/node_modules/moti/build/interactions/pressable/pressable.js
+++ b/node_modules/moti/build/interactions/pressable/pressable.js
@@ -1,85 +1,217 @@
-import React, { useMemo, forwardRef } from 'react';
-import { Platform, Pressable } from 'react-native';
-import { TouchableWithoutFeedback } from 'react-native-gesture-handler';
-import Animated, { useSharedValue, runOnJS, useDerivedValue, } from 'react-native-reanimated';
-import { MotiView } from '@motify/components';
-import { MotiPressableContext, useMotiPressableContext, INTERACTION_CONTAINER_ID, } from './context';
-import { Hoverable } from './hoverable';
-const AnimatedTouchable = Animated.createAnimatedComponent(TouchableWithoutFeedback);
+import React, { useMemo, forwardRef } from "react";
+import { Platform, Pressable } from "react-native";
+import Animated, {
+  useSharedValue,
+  runOnJS,
+  useDerivedValue,
+} from "react-native-reanimated";
+import { MotiView } from "@motify/components";
+import {
+  MotiPressableContext,
+  useMotiPressableContext,
+  INTERACTION_CONTAINER_ID,
+} from "./context";
+import { Hoverable } from "./hoverable";
+const AnimatedTouchable = Animated.createAnimatedComponent(Pressable);
 export const MotiPressable = forwardRef(function MotiPressable(props, ref) {
-    const { animate, from, exit, children, exitTransition, transition: transitionProp, style, onPressOut, onPressIn, onHoverIn, onHoverOut, onPress, onLongPress, hitSlop, disabled, containerStyle, dangerouslySilenceDuplicateIdsWarning = false, id, hoveredValue, pressedValue, onLayout, onContainerLayout, 
+  const {
+    animate,
+    from,
+    exit,
+    children,
+    exitTransition,
+    transition: transitionProp,
+    style,
+    onPressOut,
+    onPressIn,
+    onHoverIn,
+    onHoverOut,
+    onPress,
+    onLongPress,
+    hitSlop,
+    disabled,
+    containerStyle,
+    dangerouslySilenceDuplicateIdsWarning = false,
+    id,
+    hoveredValue,
+    pressedValue,
+    onLayout,
+    onContainerLayout,
     // Accessibility props
-    accessibilityActions, accessibilityElementsHidden, accessibilityHint, accessibilityIgnoresInvertColors, accessibilityLabel, accessibilityLiveRegion, accessibilityRole, accessibilityState, accessibilityValue, accessibilityViewIsModal, accessible, onAccessibilityTap, onAccessibilityAction, onAccessibilityEscape, importantForAccessibility, onFocus, onBlur, } = props;
-    const _hovered = useSharedValue(false);
-    const _pressed = useSharedValue(false);
-    const hovered = hoveredValue || _hovered;
-    const pressed = pressedValue || _pressed;
-    const interaction = useDerivedValue(() => ({
-        hovered: hovered.value,
-        pressed: pressed.value,
-    }), [hovered, pressed]);
-    const transition = useDerivedValue(() => {
-        if (typeof transitionProp === 'function') {
-            return transitionProp(interaction.value);
-        }
-        return transitionProp || {};
-    }, [transitionProp, interaction]);
-    const __state = useDerivedValue(() => {
-        if (typeof animate === 'function') {
-            return animate(interaction.value);
-        }
-        return animate;
-    }, [animate, interaction]);
-    const state = useMemo(() => ({ __state }), [__state]);
-    const updateInteraction = (event, enabled, callback) => () => {
-        'worklet';
-        if (event === 'hovered') {
-            hovered.value = enabled;
-        }
-        else if (event === 'pressed') {
-            pressed.value = enabled;
-        }
-        if (callback) {
-            runOnJS(callback)();
-        }
-    };
-    const child = (React.createElement(MotiView, { from: from, exit: exit, transition: transition, exitTransition: exitTransition, state: state, style: style, onLayout: onLayout }, children));
-    let node;
-    if (Platform.OS === 'web') {
-        node = (React.createElement(Hoverable, { onHoverIn: updateInteraction('hovered', true, onHoverIn), onHoverOut: updateInteraction('hovered', false, onHoverOut), childRef: ref },
-            React.createElement(Pressable, { onLongPress: onLongPress, hitSlop: hitSlop, disabled: disabled, style: containerStyle, onPress: onPress, onPressIn: updateInteraction('pressed', true, onPressIn), onPressOut: updateInteraction('pressed', false, onPressOut), ref: ref, onLayout: onContainerLayout, 
-                // Accessibility props
-                accessibilityActions: accessibilityActions, accessibilityElementsHidden: accessibilityElementsHidden, accessibilityHint: accessibilityHint, accessibilityIgnoresInvertColors: accessibilityIgnoresInvertColors, accessibilityLabel: accessibilityLabel, accessibilityLiveRegion: accessibilityLiveRegion, accessibilityRole: accessibilityRole, accessibilityState: accessibilityState, accessibilityValue: accessibilityValue, accessibilityViewIsModal: accessibilityViewIsModal, accessible: accessible, onAccessibilityTap: onAccessibilityTap, onAccessibilityAction: onAccessibilityAction, onAccessibilityEscape: onAccessibilityEscape, importantForAccessibility: importantForAccessibility, 
-                // @ts-expect-error RNW types
-                onFocus: onFocus, onBlur: onBlur }, child)));
+    accessibilityActions,
+    accessibilityElementsHidden,
+    accessibilityHint,
+    accessibilityIgnoresInvertColors,
+    accessibilityLabel,
+    accessibilityLiveRegion,
+    accessibilityRole,
+    accessibilityState,
+    accessibilityValue,
+    accessibilityViewIsModal,
+    accessible,
+    onAccessibilityTap,
+    onAccessibilityAction,
+    onAccessibilityEscape,
+    importantForAccessibility,
+    onFocus,
+    onBlur,
+  } = props;
+  const _hovered = useSharedValue(false);
+  const _pressed = useSharedValue(false);
+  const hovered = hoveredValue || _hovered;
+  const pressed = pressedValue || _pressed;
+  const interaction = useDerivedValue(
+    () => ({
+      hovered: hovered.value,
+      pressed: pressed.value,
+    }),
+    [hovered, pressed]
+  );
+  const transition = useDerivedValue(() => {
+    if (typeof transitionProp === "function") {
+      return transitionProp(interaction.value);
     }
-    else {
-        node = (React.createElement(AnimatedTouchable, { onPressIn: updateInteraction('pressed', true, onPressIn), onPressOut: updateInteraction('pressed', false, onPressOut), onLongPress: onLongPress, hitSlop: hitSlop, disabled: disabled, onPress: onPress, 
-            // @ts-expect-error incorrect ref type
-            ref: ref, onLayout: onContainerLayout, containerStyle: containerStyle, 
-            // Accessibility props
-            accessibilityActions: accessibilityActions, accessibilityElementsHidden: accessibilityElementsHidden, accessibilityHint: accessibilityHint, accessibilityIgnoresInvertColors: accessibilityIgnoresInvertColors, accessibilityLabel: accessibilityLabel, accessibilityLiveRegion: accessibilityLiveRegion, accessibilityRole: accessibilityRole, accessibilityState: accessibilityState, accessibilityValue: accessibilityValue, accessibilityViewIsModal: accessibilityViewIsModal, accessible: accessible, onAccessibilityTap: onAccessibilityTap, onAccessibilityAction: onAccessibilityAction, onAccessibilityEscape: onAccessibilityEscape, importantForAccessibility: importantForAccessibility, onFocus: onFocus, onBlur: onBlur }, child));
+    return transitionProp || {};
+  }, [transitionProp, interaction]);
+  const __state = useDerivedValue(() => {
+    if (typeof animate === "function") {
+      return animate(interaction.value);
     }
-    const context = useMotiPressableContext();
-    if (!dangerouslySilenceDuplicateIdsWarning &&
-        id &&
-        context?.containers &&
-        id in context.containers) {
-        console.error(`[MotiPressable] Duplicate id ${id} used. This means that you incorrectly placed a <MotiPressable id="${id}" /> component inside another one with the same id.
+    return animate;
+  }, [animate, interaction]);
+  const state = useMemo(() => ({ __state }), [__state]);
+  const updateInteraction = (event, enabled, callback) => () => {
+    "worklet";
+    if (event === "hovered") {
+      hovered.value = enabled;
+    } else if (event === "pressed") {
+      pressed.value = enabled;
+    }
+    if (callback) {
+      runOnJS(callback)();
+    }
+  };
+  const child = React.createElement(
+    MotiView,
+    {
+      from: from,
+      exit: exit,
+      transition: transition,
+      exitTransition: exitTransition,
+      state: state,
+      style: style,
+      onLayout: onLayout,
+    },
+    children
+  );
+  let node;
+  if (Platform.OS === "web") {
+    node = React.createElement(
+      Hoverable,
+      {
+        onHoverIn: updateInteraction("hovered", true, onHoverIn),
+        onHoverOut: updateInteraction("hovered", false, onHoverOut),
+        childRef: ref,
+      },
+      React.createElement(
+        Pressable,
+        {
+          onLongPress: onLongPress,
+          hitSlop: hitSlop,
+          disabled: disabled,
+          style: containerStyle,
+          onPress: onPress,
+          onPressIn: updateInteraction("pressed", true, onPressIn),
+          onPressOut: updateInteraction("pressed", false, onPressOut),
+          ref: ref,
+          onLayout: onContainerLayout,
+          // Accessibility props
+          accessibilityActions: accessibilityActions,
+          accessibilityElementsHidden: accessibilityElementsHidden,
+          accessibilityHint: accessibilityHint,
+          accessibilityIgnoresInvertColors: accessibilityIgnoresInvertColors,
+          accessibilityLabel: accessibilityLabel,
+          accessibilityLiveRegion: accessibilityLiveRegion,
+          accessibilityRole: accessibilityRole,
+          accessibilityState: accessibilityState,
+          accessibilityValue: accessibilityValue,
+          accessibilityViewIsModal: accessibilityViewIsModal,
+          accessible: accessible,
+          onAccessibilityTap: onAccessibilityTap,
+          onAccessibilityAction: onAccessibilityAction,
+          onAccessibilityEscape: onAccessibilityEscape,
+          importantForAccessibility: importantForAccessibility,
+          // @ts-expect-error RNW types
+          onFocus: onFocus,
+          onBlur: onBlur,
+        },
+        child
+      )
+    );
+  } else {
+    node = React.createElement(
+      AnimatedTouchable,
+      {
+        onPressIn: updateInteraction("pressed", true, onPressIn),
+        onPressOut: updateInteraction("pressed", false, onPressOut),
+        onLongPress: onLongPress,
+        hitSlop: hitSlop,
+        disabled: disabled,
+        onPress: onPress,
+        // @ts-expect-error incorrect ref type
+        ref: ref,
+        onLayout: onContainerLayout,
+        containerStyle: containerStyle,
+        // Accessibility props
+        accessibilityActions: accessibilityActions,
+        accessibilityElementsHidden: accessibilityElementsHidden,
+        accessibilityHint: accessibilityHint,
+        accessibilityIgnoresInvertColors: accessibilityIgnoresInvertColors,
+        accessibilityLabel: accessibilityLabel,
+        accessibilityLiveRegion: accessibilityLiveRegion,
+        accessibilityRole: accessibilityRole,
+        accessibilityState: accessibilityState,
+        accessibilityValue: accessibilityValue,
+        accessibilityViewIsModal: accessibilityViewIsModal,
+        accessible: accessible,
+        onAccessibilityTap: onAccessibilityTap,
+        onAccessibilityAction: onAccessibilityAction,
+        onAccessibilityEscape: onAccessibilityEscape,
+        importantForAccessibility: importantForAccessibility,
+        onFocus: onFocus,
+        onBlur: onBlur,
+      },
+      child
+    );
+  }
+  const context = useMotiPressableContext();
+  if (
+    !dangerouslySilenceDuplicateIdsWarning &&
+    id &&
+    context?.containers &&
+    id in context.containers
+  ) {
+    console.error(`[MotiPressable] Duplicate id ${id} used. This means that you incorrectly placed a <MotiPressable id="${id}" /> component inside another one with the same id.
 
 To silence this warning without solving the actual issue, you can use the dangerouslySilenceDuplicateIdsWarning prop. But you should probably refactor your code instead.`);
-    }
-    return (React.createElement(MotiPressableContext.Provider, { value: useMemo(() => {
-            const interactions = {
-                containers: {
-                    ...context?.containers,
-                    [INTERACTION_CONTAINER_ID]: interaction,
-                },
-            };
-            if (id) {
-                interactions.containers[id] = interaction;
-            }
-            return interactions;
-        }, [context?.containers, id, interaction]) }, node));
+  }
+  return React.createElement(
+    MotiPressableContext.Provider,
+    {
+      value: useMemo(() => {
+        const interactions = {
+          containers: {
+            ...context?.containers,
+            [INTERACTION_CONTAINER_ID]: interaction,
+          },
+        };
+        if (id) {
+          interactions.containers[id] = interaction;
+        }
+        return interactions;
+      }, [context?.containers, id, interaction]),
+    },
+    node
+  );
 });
 //# sourceMappingURL=pressable.js.map
