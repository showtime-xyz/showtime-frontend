diff --git a/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m b/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
index 5650c95..d100791 100644
--- a/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
+++ b/node_modules/expo-av/ios/EXAV/EXAVPlayerData.m
@@ -325,7 +325,7 @@ - (void)setStatus:(NSDictionary *)parameters
 
       if (audioSessionError) {
         if (reject) {
-          reject(@"E_AV_PLAY", @"Play encountered an error: audio session not activated.", audioSessionError);
+          // reject(@"E_AV_PLAY", @"Play encountered an error: audio session not activated.", audioSessionError);
         }
       } else if (!seekSucceeded) {
         if (reject) {
diff --git a/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m b/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m
index 81dce13..1d6dbc6 100644
--- a/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m
+++ b/node_modules/expo-av/ios/EXAV/EXAudioSessionManager.m
@@ -170,7 +170,9 @@ - (void)moduleDidBackground:(id)backgroundingModule
   [_foregroundedModules compact];
 
   // Any possible failures are silent
-  [self _updateSessionConfiguration];
+  AVAudioSession *session = [AVAudioSession sharedInstance];
+  [session setCategory:AVAudioSessionCategoryAmbient error:nil];
+  [session setActive:false withOptions:AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation error:nil];
 }
 
 - (void)moduleDidForeground:(id)module
@@ -185,8 +187,9 @@ - (void)moduleDidForeground:(id)module
 
   [_foregroundedModules addPointer:(__bridge void * _Nullable)(module)];
 
-  // Any possible failures are silent
-  [self _updateSessionConfiguration];
+  AVAudioSession *session = [AVAudioSession sharedInstance];
+  [session setCategory:AVAudioSessionCategoryPlayback error:nil];
+  [session setActive:true withOptions:AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation error:nil];
 }
 
 - (void)moduleWillDeallocate:(id)module
@@ -208,7 +211,7 @@ - (NSError *)_updateSessionConfiguration
 
   BOOL shouldBeActive = [self _shouldBeActive];
   NSString *category = [self _getRequestedCategory];
-  AVAudioSessionCategoryOptions options = [self _getCategoryOptions];
+  AVAudioSessionCategoryOptions options = [self _getCategoryOptions] | AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation;
 
   // If the session ought to be deactivated let's deactivate it and then configure.
   // And if the session should be activated, let's configure it first!
@@ -284,7 +287,8 @@ - (NSString *)_getRequestedCategory
     }
   }
 
-  return AVAudioSessionCategorySoloAmbient;
+  // patched to also playback in silent mode (from SoloAmbient to Playback)
+  return AVAudioSessionCategoryPlayback;
 }
 
 - (AVAudioSessionCategoryOptions)_getCategoryOptions
