diff --git a/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedReaction.js b/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedReaction.js
index 15a2f77..5889f00 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedReaction.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedReaction.js
@@ -1,6 +1,8 @@
 import { useEffect } from 'react';
 import { startMapper, stopMapper } from '../core';
 import { useSharedValue } from './useSharedValue';
+import { shouldBeUseWeb } from '../PlatformChecker';
+
 /**
  * @param prepare - worklet used for data preparation for the second parameter
  * @param react - worklet which takes data prepared by the one in the first parameter and performs certain actions
@@ -10,6 +12,15 @@ import { useSharedValue } from './useSharedValue';
 export function useAnimatedReaction(prepare, react, dependencies) {
     var _a, _b;
     const previous = useSharedValue(null);
+    let inputs = Object.values(prepare._closure ?? {});
+
+  if (shouldBeUseWeb()) {
+    if (!inputs.length && dependencies?.length) {
+      // let web work without a Babel/SWC plugin
+      inputs = dependencies;
+    }
+  }
+
     if (dependencies === undefined) {
         dependencies = [
             Object.values((_a = prepare._closure) !== null && _a !== void 0 ? _a : {}),
@@ -29,7 +40,7 @@ export function useAnimatedReaction(prepare, react, dependencies) {
             react(input, previous.value);
             previous.value = input;
         };
-        const mapperId = startMapper(fun, Object.values((_a = prepare._closure) !== null && _a !== void 0 ? _a : {}), []);
+        const mapperId = startMapper(fun, inputs, []);
         return () => {
             stopMapper(mapperId);
         };
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedStyle.js b/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedStyle.js
index a9d30a0..7a11614 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedStyle.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedStyle.js
@@ -271,7 +271,20 @@ export function useAnimatedStyle(updater, dependencies, adapters) {
     const viewsRef = makeViewsRefSet();
     const viewDescriptors = makeViewDescriptorsSet();
     const initRef = useRef();
-    const inputs = Object.values((_a = updater._closure) !== null && _a !== void 0 ? _a : {});
+    let inputs = Object.values(updater._closure ?? {});
+    if (shouldBeUseWeb()) {
+      if (!inputs.length && dependencies?.length) {
+        // let web work without a Babel/SWC plugin
+        inputs = dependencies;
+      }
+      if (__DEV__ && !inputs.length && !dependencies && !updater.__workletHash) {
+        throw new Error(
+          `useAnimatedStyle was used without a dependency array or Babel plugin. Please explicitly pass a dependency array, or enable the Babel/SWC plugin.
+          
+  For more, see the docs: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/web-support#web-without-a-babel-plugin`
+        );
+      }
+    }
     const adaptersArray = adapters
         ? Array.isArray(adapters)
             ? adapters
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/hook/useDerivedValue.js b/node_modules/react-native-reanimated/lib/reanimated2/hook/useDerivedValue.js
index 69cf320..193350d 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/hook/useDerivedValue.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/hook/useDerivedValue.js
@@ -1,11 +1,19 @@
 import { useEffect, useRef } from 'react';
 import { initialUpdaterRun } from '../animation';
 import { makeMutable, startMapper, stopMapper } from '../core';
+import { shouldBeUseWeb } from '../PlatformChecker';
+
 export function useDerivedValue(processor, dependencies) {
     var _a;
     const initRef = useRef(null);
-    const inputs = Object.values((_a = processor._closure) !== null && _a !== void 0 ? _a : {});
-    // build dependencies
+    let inputs = Object.values(processor._closure ?? {});
+    if (shouldBeUseWeb()) {
+      if (!inputs.length && dependencies?.length) {
+        // let web work without a Babel/SWC plugin
+        inputs = dependencies;
+      }
+    }
+      // build dependencies
     if (dependencies === undefined) {
         dependencies = [...inputs, processor.__workletHash];
     }
diff --git a/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/Mapper.js b/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/Mapper.js
index 46e3e88..b2af463 100644
--- a/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/Mapper.js
+++ b/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/Mapper.js
@@ -1,4 +1,6 @@
 import MutableValue from './MutableValue';
+import { shouldBeUseWeb } from '../PlatformChecker';
+
 export default class Mapper {
     constructor(module, mapper, inputs = [], outputs = []) {
         this.dirty = true;
@@ -30,6 +32,10 @@ export default class Mapper {
             else if (Array.isArray(value)) {
                 value.forEach((v) => extractMutables(v));
             }
+            else if (isWebDomElement(value)) {
+                // do nothing on dom elements
+                // without this check, we get a "Maximum call size exceeded error"
+              }
             else if (typeof value === 'object') {
                 Object.keys(value).forEach((key) => {
                     extractMutables(value[key]);
@@ -41,3 +47,32 @@ export default class Mapper {
     }
 }
 Mapper.MAPPER_ID = 1;
+
+
+function isWebDomElement(value) {
+    if (!shouldBeUseWeb()) {
+      return false;
+    }
+  
+    // https://stackoverflow.com/a/384380/7869175
+    function isWebNode(o) {
+      return typeof Node === 'object'
+        ? o instanceof Node
+        : o &&
+            typeof o === 'object' &&
+            typeof o.nodeType === 'number' &&
+            typeof o.nodeName === 'string';
+    }
+  
+    function isWebElement(o) {
+      return typeof HTMLElement === 'object'
+        ? o instanceof HTMLElement // DOM2
+        : o &&
+            typeof o === 'object' &&
+            o !== null &&
+            o.nodeType === 1 &&
+            typeof o.nodeName === 'string';
+    }
+  
+    return isWebNode(value) || isWebElement(value);
+  }
\ No newline at end of file
